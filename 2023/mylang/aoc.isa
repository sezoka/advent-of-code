string :: []int;

exit :: fn() {
  @js("throw new Error()");
};

copy_string :: fn(str: string) []int {
  new_str := []int{};

  for i := 0; i < @int_arr_len(str); i += 1 {
    @int_arr_push(new_str, str[i]);
  }

  return new_str;
};

concat_strings :: fn(str1: string, str2: string) []int {
  new_str := copy_string(str1);

  for i := 0; i < @int_arr_len(str2); i += 1 {
    @int_arr_push(new_str, str2[i]);
  }

  return new_str;
};

read_input :: fn(file: string) []int {
  str := @read_file_to_string(concat_strings("../input/", file));
  if str == null {
    @print_str("Can't read file");
    exit();
  }

  return string(@unwrap(?any(str)));
};

strlen :: @int_arr_len;

line_iterator :: fn(str: string, start: int) ?int {
  if (str[start] == '\n') start += 1;
  for i := start; i < strlen(str); i += 1 {
    if (str[i] == '\n') return i;
  }

  return null;
};

push_char :: @int_arr_push;

push_string :: fn(arr: [][]int, str: []int) {
  @js(`arr.push(str)`);
};

lines_len :: fn(lines: [][]int) int {
  len := 0;
  @js("len = lines.length");
  return len;
};

split :: fn(text: []int, pattern: []int) [][]int {
  lines := [][]int{};
  line := []int{};
  start := 0;
  for i := 0; i < strlen(text); i += 1 {
    if text[i] == pattern[0] && i + strlen(pattern) < strlen(text) {
      good := true;
      for j := 1; j < strlen(pattern); j += 1 {
        if text[i + j] != pattern[j] {
          good = false;
          break;
        }
      }
      if good {
        i += strlen(pattern) - 1;
        push_string(lines, line);
        line = []int{};
      }
    } else {
      push_char(line, text[i]);
    }
  }
  if strlen(line) != 0 {
    push_string(lines, line);
  }
  return lines;
};

split_lines :: fn(text: []int) [][]int {
  return split(text, "\n");
};

streq :: fn(a: []int, b: []int) bool {
  if strlen(a) != strlen(b) {
    return false;
  }

  for i := 0; i < strlen(a); i += 1 {
    if a[i] != b[i] return false;
  }

  return true;
};

parse_int :: fn(str: []int) int {
  result := 0;
  for i := 0; i < strlen(str); i += 1 {
    if '0' <= str[i] && str[i] <= '9' 
      result = result * 10 + (str[i] - '0');
  }
  return result;
};

day_1 :: fn() {
  parse_digit :: fn(str: []int, start: int, include_letters: bool) ?int {
    if '0' <= str[start] && str[start] <= '9' {
      return str[start] - '0';
    }

    if !include_letters return null;

    if strlen(str) - start < 3 return null;

    if str[start + 0] == 'o' &&
       str[start + 1] == 'n' &&
       str[start + 2] == 'e' return 1;

    if str[start + 0] == 't' &&
       str[start + 1] == 'w' &&
       str[start + 2] == 'o' return 2;

    if str[start + 0] == 's' &&
       str[start + 1] == 'i' &&
       str[start + 2] == 'x' return 6;

    if strlen(str) - start < 4 return null;

    if str[start + 0] == 'f' &&
       str[start + 1] == 'o' &&
       str[start + 2] == 'u' &&
       str[start + 3] == 'r' return 4;

    if str[start + 0] == 'f' &&
       str[start + 1] == 'i' &&
       str[start + 2] == 'v' &&
       str[start + 3] == 'e' return 5;

    if str[start + 0] == 'n' &&
       str[start + 1] == 'i' &&
       str[start + 2] == 'n' &&
       str[start + 3] == 'e' return 9;

    if strlen(str) - start < 5 return null;

    if str[start + 0] == 't' &&
       str[start + 1] == 'h' &&
       str[start + 2] == 'r' &&
       str[start + 3] == 'e' &&
       str[start + 4] == 'e' return 3;

    if str[start + 0] == 's' &&
       str[start + 1] == 'e' &&
       str[start + 2] == 'v' &&
       str[start + 3] == 'e' &&
       str[start + 4] == 'n' return 7;

    if str[start + 0] == 'e' &&
       str[start + 1] == 'i' &&
       str[start + 2] == 'g' &&
       str[start + 3] == 'h' &&
       str[start + 4] == 't' return 8;

    return null;
  };

  find_first_digit_in_line :: fn(line: string, part_2: bool) int {
    for i := 0; i < strlen(line); i += 1 {
      maybe_digit := parse_digit(line, i, part_2);
      if maybe_digit != null return int(@unwrap(?any(maybe_digit)));
    }
    return 0;
  };

  find_last_digit_in_line :: fn(line: string, part_2: bool) int {
    for i := strlen(line) - 1; 0 <= i; i -= 1 {
      maybe_digit := parse_digit(line, i, part_2);
      if maybe_digit != null return int(@unwrap(?any(maybe_digit)));
    }
    return 0;
  };

  input := read_input("day1");
  lines := split_lines(input);

  sum_1 := 0;
  sum_2 := 0;
  for i := 0; i < lines_len(lines); i += 1 {
    sum_1 += find_first_digit_in_line(lines[i], false) * 10 + find_last_digit_in_line(lines[i], false);
    sum_2 += find_first_digit_in_line(lines[i], true) * 10 + find_last_digit_in_line(lines[i], true);
  }

  @print_str("day.1/part.1:");
  @print(any(sum_1));
  @print_str("day.1/part.2:");
  @print(any(sum_2));
};



day_2 :: fn() {
  input := read_input("day2");
  lines := split_lines(input);

  game_id_sum := 0;
  powers_sum := 0;

  for line_idx := 0; line_idx < lines_len(lines); line_idx += 1 {
    line := lines[line_idx];

    game_and_data := split(line, ": ");
    game_data := game_and_data[1];
    subsets := split(game_data, "; ");

    max_red := 0;
    max_green := 0;
    max_blue := 0;

    for i := 0; i < lines_len(subsets); i += 1 {
      boxes := split(subsets[i], ", ");
      for j := 0; j < lines_len(boxes); j += 1 {
        box := boxes[j];
        num_and_color := split(box, " ");
        num := parse_int(num_and_color[0]);
        color := num_and_color[1];

        if streq(color, "red") && max_red < num
          max_red = num;
        else if streq(color, "green") && max_green < num
          max_green = num;
        else if streq(color, "blue") && max_blue < num
          max_blue = num;
      }
    }

    if max_red <= 12 && max_green <= 13 && max_blue <= 14 {
      game_id_sum += line_idx + 1;
    }

    powers_sum += max_red * max_green * max_blue;
  }


  @print_str("day.2/part.1:");
  @print(any(game_id_sum));
  @print_str("day.2/part.2:");
  @print(any(powers_sum));
};


main :: fn() {
  # day_1();
  day_2();
};

main();
